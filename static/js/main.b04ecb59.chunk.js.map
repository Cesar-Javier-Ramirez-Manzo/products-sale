{"version":3,"sources":["assets/cubeSpin.gif","components/Products.js","App.js","reportWebVitals.js","index.js"],"names":["data","JSON","parse","localStorage","getItem","validate","values","errors","nombre","costo","precio","Products","state","modalActualizar","modalInsertar","hasNoC","hasNoP","form","id","iva","mostrarModalActualizar","dato","setState","cerrarModalActualizar","mostrarModalInsertar","cerrarModalInsertar","editar","contador","arreglo","map","registro","result","Object","keys","length","parseFloat","setItem","stringify","eliminar","window","confirm","splice","insertar","valorNuevo","lista","push","handleChange","e","target","name","value","handleCheckP","checked","handleCheckC","data-testid","color","onClick","striped","bordered","hover","this","className","isOpen","readOnly","type","required","maxLength","onChange","bg","check","inline","React","Component","App","src","cube","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oMAAe,G,kBAAA,IAA0B,sC,2ECoBrCA,EAAO,GAEX,GAAmD,MAA/CC,KAAKC,MAAMC,aAAaC,QAAQ,YAC9BJ,EAAOC,KAAKC,MAAMC,aAAaC,QAAQ,iBAGvCJ,EAAO,GAIb,IAAMK,EAAW,SAAAC,GACf,IAAMC,EAAS,GAWf,OAVKD,EAAOE,SACVD,EAAOC,OAAS,gEAEbF,EAAOG,QACVF,EAAOE,MAAQ,8BAEZH,EAAOI,SACVH,EAAOG,OAAS,8BAGXH,GAsdMI,E,4MAldbC,MAAQ,CACNZ,KAAMA,EACNa,iBAAiB,EACjBC,eAAe,EACfC,QAAQ,EACRC,QAAQ,EACRC,KAAM,CACJC,GAAI,GACJV,OAAQ,GACRC,MAAO,GACPU,IAAK,GACLT,OAAQ,IAEVH,OAAQ,I,EAIVa,uBAAyB,SAACC,GACxB,EAAKC,SAAS,CACZL,KAAMI,EACNR,iBAAiB,K,EAIrBU,sBAAwB,WACtB,EAAKD,SAAS,CAAET,iBAAiB,EAAOE,QAAQ,EAAOC,QAAQ,K,EAIjEQ,qBAAuB,WAErB,EAAKF,SAAS,CACZR,eAAe,K,EAInBW,oBAAsB,WACpB,EAAKH,SAAS,CAAER,eAAe,EAAOC,QAAQ,EAAOC,QAAQ,K,EAI/DU,OAAS,SAACL,GAER,IAAIM,EAAW,EACXC,EAAU,EAAKhB,MAAMZ,KAEzB4B,EAAQC,KAAI,SAACC,GAEX,GAAIT,EAAKH,KAAOY,EAASZ,GAAI,CAE3B,IAAIa,EAAS1B,EAASgB,GACtB,EAAKC,SAAS,CAAEf,OAAQwB,IACnBC,OAAOC,KAAKF,GAAQG,SACvBN,EAAQD,GAAUnB,OAASa,EAAKb,OAChCoB,EAAQD,GAAUlB,MAAQY,EAAKZ,MAC/BmB,EAAQD,GAAUR,IAA+B,IAAzBgB,WAAWd,EAAKZ,OAAgB0B,WAAWd,EAAKZ,OACxEmB,EAAQD,GAAUjB,OAASW,EAAKX,QAIpCiB,OAIF,IAAII,EAAS1B,EAASgB,GACjBW,OAAOC,KAAKF,GAAQG,OAMvB,EAAKZ,SAAS,CAAET,iBAAiB,KALjC,EAAKS,SAAS,CAAEtB,KAAM4B,EAASf,iBAAiB,IAEhDV,aAAaiC,QAAQ,UAAWnC,KAAKoC,UAAU,EAAKzB,MAAMZ,S,EAO9DsC,SAAW,SAACjB,GAEV,IAAe,IADFkB,OAAOC,QAAQ,2CAAuCnB,EAAKb,OAAS,KAC5D,CACnB,IAAImB,EAAW,EACXC,EAAU,EAAKhB,MAAMZ,KACzB4B,EAAQC,KAAI,SAACC,GACPT,EAAKH,KAAOY,EAASZ,IACvBU,EAAQa,OAAOd,EAAU,GAE3BA,OAEF,EAAKL,SAAS,CAAEtB,KAAM4B,EAASf,iBAAiB,IAChDV,aAAaiC,QAAQ,UAAWnC,KAAKoC,UAAU,EAAKzB,MAAMZ,S,EAI9D0C,SAAW,WAET,EAAK9B,MAAMK,KAAKE,IAA0C,IAApCgB,WAAW,EAAKvB,MAAMK,KAAKR,OAAgB0B,WAAW,EAAKvB,MAAMK,KAAKR,OAC5F,IAAIkC,EAAU,eAAQ,EAAK/B,MAAMK,MACjC0B,EAAWzB,GAAK,EAAKN,MAAMZ,KAAKkC,OAAS,EAEzC,IAAMH,EAAS1B,EAASsC,GAExB,GADA,EAAKrB,SAAS,CAAEf,OAAQwB,IACnBC,OAAOC,KAAKF,GAAQG,OAiBvB,EAAKZ,SAAS,CAAER,eAAe,QAjBA,CAC/B,IAAI8B,EAAQ,EAAKhC,MAAMZ,KACvB4C,EAAMC,KAAKF,GACX,EAAKrB,SAAS,CAAER,eAAe,EAAOC,QAAQ,EAAOC,QAAQ,EAAOhB,KAAM4C,IAC1E,EAAKtB,SAAS,CACZL,KAAM,CACJC,GAAI,GACJV,OAAQ,GACRC,MAAO,GACPU,IAAK,GACLT,OAAQ,MAIZP,aAAaiC,QAAQ,UAAWnC,KAAKoC,UAAU,EAAKzB,MAAMZ,S,EAQ9D8C,aAAe,SAACC,GACd,EAAKzB,SAAS,CACZL,KAAK,2BACA,EAAKL,MAAMK,MADZ,kBAED8B,EAAEC,OAAOC,KAAOF,EAAEC,OAAOE,W,EAKhCC,aAAe,SAACJ,GAEVA,EAAEC,OAAOI,QACX,EAAK9B,SAAS,CACZN,OAAQ+B,EAAEC,OAAOI,QACjBnC,KAAK,2BACA,EAAKL,MAAMK,MADZ,IAEFP,OAAQ,gBAKZ,EAAKY,SAAS,CACZN,OAAQ+B,EAAEC,OAAOI,QACjBnC,KAAK,2BACA,EAAKL,MAAMK,MADZ,IAEFP,OAAQ,Q,EAMhB2C,aAAe,SAACN,GAEVA,EAAEC,OAAOI,QACX,EAAK9B,SAAS,CACZP,OAAQgC,EAAEC,OAAOI,QACjBnC,KAAK,2BACA,EAAKL,MAAMK,MADZ,IAEFR,MAAO,QAIX,EAAKa,SAAS,CACZP,OAAQgC,EAAEC,OAAOI,QACjBnC,KAAK,2BACA,EAAKL,MAAMK,MADZ,IAEFR,MAAO,Q,4CAQf,WAAU,IAAD,OAGP,OACE,qCACE,eAAC,IAAD,WACE,uBAEA,eAAC,IAAD,CAAQS,GAAG,OAAOoC,cAAY,OAAOC,MAAM,UAAUC,QAAS,kBAAM,EAAKhC,wBAAzE,cAAkG,cAAC,IAAD,OAClG,uBACA,uBACA,eAAC,IAAD,CAAOiC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAACzC,GAAG,QAAjC,UACE,uBAAOoC,cAAY,SAAnB,SACE,+BACE,oCACA,wCACA,uCACA,2CACA,wCACA,+CAIJ,gCACGM,KAAKhD,MAAMZ,KAAK6B,KAAI,SAACR,GAAD,OACnB,+BACE,6BAAKA,EAAKH,KACV,6BAAKG,EAAKb,SACV,mCAAMa,EAAKZ,SACX,mCAAMY,EAAKF,OACX,mCAAME,EAAKX,UACX,qBAAIQ,GAAG,UAAP,UACE,cAAC,IAAD,CACEqC,MAAM,UACNM,UAAU,UACVL,QAAS,kBAAM,EAAKpC,uBAAuBC,IAH7C,SAKE,cAAC,IAAD,MACQ,IACV,eAAC,IAAD,CAAQkC,MAAM,SAASM,UAAU,UAAUL,QAAS,kBAAM,EAAKlB,SAASjB,IAAxE,cAAgF,cAAC,IAAD,IAAhF,YAdKA,EAAKH,eAsBtB,eAAC,IAAD,CAAO4C,OAAQF,KAAKhD,MAAMC,gBAA1B,UACE,cAAC,IAAD,UACE,8BAAK,qDAGP,eAAC,IAAD,WACE,eAAC,IAAD,WACE,wCAIA,uBACEgD,UAAU,eACVE,UAAQ,EACRC,KAAK,OACLd,MAAOU,KAAKhD,MAAMZ,KAAKkC,YAI3B,eAAC,IAAD,WACE,4CAGA,uBACE2B,UAAU,eACVZ,KAAK,SACLe,KAAK,OACLC,SAAS,OACTC,UAAU,KACVhB,MAAOU,KAAKhD,MAAMK,KAAKT,OACvB2D,SAAUP,KAAKd,kBAGnB,eAAE,IAAF,CAAQsB,GAAG,SAAX,cAAsBR,KAAKhD,MAAML,OAAOC,UACxC,eAAC,IAAD,WACE,2CAGA,uBACEqD,UAAU,eACVZ,KAAK,QACLe,KAAK,SACLC,SAAS,OACTf,MAAOU,KAAKhD,MAAMK,KAAKR,MACvB0D,SAAUP,KAAKd,kBAGnB,eAAE,IAAF,CAAQsB,GAAG,SAAX,cAAsBR,KAAKhD,MAAML,OAAOE,SACxC,eAAC,IAAD,CACE4D,OAAK,EACLC,QAAM,EAFR,UAIE,cAAC,IAAD,CAAON,KAAK,WAAWG,SAAUP,KAAKP,eACtC,cAAC,IAAD,CAAOgB,OAAK,EAAZ,2BAKF,eAAC,IAAD,WACE,+CAGA,uBACER,UAAU,eACVZ,KAAK,MACLc,UAAQ,EACRC,KAAK,SACLd,MAA2C,IAApCf,WAAWyB,KAAKhD,MAAMK,KAAKR,OAAgB0B,WAAWyB,KAAKhD,MAAMK,KAAKR,OAC7EwD,SAAS,OACTE,SAAUP,KAAKd,kBAGnB,eAAC,IAAD,WACE,4CAGCc,KAAKhD,MAAMI,OAAS,KACnB,uBACE6C,UAAU,eACVZ,KAAK,SACLe,KAAK,SACLC,SAAS,OACTf,MAAOU,KAAKhD,MAAMK,KAAKP,OACvByD,SAAUP,KAAKd,kBAGrB,eAAE,IAAF,CAAQsB,GAAG,SAAX,cAAsBR,KAAKhD,MAAML,OAAOG,UACxC,eAAC,IAAD,CACE2D,OAAK,EACLC,QAAM,EAFR,UAGE,cAAC,IAAD,CAAON,KAAK,WAAWG,SAAUP,KAAKT,eACtC,cAAC,IAAD,CAAOkB,OAAK,EAAZ,8BAOJ,eAAC,IAAD,WACE,cAAC,IAAD,CACEd,MAAM,UACNM,UAAU,UACVL,QAAS,kBAAM,EAAK9B,OAAO,EAAKd,MAAMK,OAHxC,SAKE,cAAC,IAAD,MAEF,cAAC,IAAD,CACEsC,MAAM,SACNM,UAAU,UACVL,QAAS,kBAAM,EAAKjC,yBAHtB,SAKE,cAAC,IAAD,YAON,eAAC,IAAD,CAAOuC,OAAQF,KAAKhD,MAAME,cAAewC,cAAY,QAArD,UACE,cAAC,IAAD,UACE,8BAAK,uDAGP,eAAC,IAAD,WACE,eAAC,IAAD,WACE,wCAIA,uBACEO,UAAU,eACVE,UAAQ,EACRC,KAAK,OACLd,MAAOU,KAAKhD,MAAMZ,KAAKkC,OAAS,OAIpC,eAAC,IAAD,WACE,4CAGA,uBACE2B,UAAU,eACVZ,KAAK,SACLe,KAAK,OACLC,SAAS,OACTX,cAAY,UACZY,UAAU,KACVC,SAAUP,KAAKd,kBAGnB,eAAE,IAAF,CAAQsB,GAAG,SAAX,cAAsBR,KAAKhD,MAAML,OAAOC,UAExC,eAAC,IAAD,WACE,2CAGCoD,KAAKhD,MAAMG,OAAS,KACnB,uBACE8C,UAAU,eACVZ,KAAK,QACLe,KAAK,SACLV,cAAY,QACZW,SAAS,OACTE,SAAUP,KAAKd,eAEnB,eAAE,IAAF,CAAQsB,GAAG,SAAX,cAAsBR,KAAKhD,MAAML,OAAOE,YAG1C,eAAC,IAAD,CACE4D,OAAK,EACLC,QAAM,EAFR,UAGE,cAAC,IAAD,CAAON,KAAK,WAAWG,SAAUP,KAAKP,eACtC,cAAC,IAAD,CAAOgB,OAAK,EAAZ,2BAIF,eAAC,IAAD,WACE,+CAGA,uBACER,UAAU,eACVX,MAA2C,IAApCf,WAAWyB,KAAKhD,MAAMK,KAAKR,OAAgB0B,WAAWyB,KAAKhD,MAAMK,KAAKR,OAC7EwC,KAAK,MAELc,UAAQ,EACRC,KAAK,SACLC,SAAS,OACTE,SAAUP,KAAKd,kBAInB,eAAC,IAAD,WACE,4CAICc,KAAKhD,MAAMI,OAAS,KACnB,uBACE6C,UAAU,eACVZ,KAAK,SACLe,KAAK,SACLV,cAAY,SACZW,SAAS,OACTE,SAAUP,KAAKd,eAGnB,eAAE,IAAF,CAAQsB,GAAG,SAAX,cAAsBR,KAAKhD,MAAML,OAAOG,aAE1C,eAAC,IAAD,CACE2D,OAAK,EACLC,QAAM,EAFR,UAGE,cAAC,IAAD,CAAON,KAAK,WAAWG,SAAUP,KAAKT,eACtC,cAAC,IAAD,CAAOkB,OAAK,EAAZ,8BAMJ,eAAC,IAAD,WACE,cAAC,IAAD,CACEd,MAAM,UACND,cAAY,YACZO,UAAU,UACVL,QAAS,kBAAM,EAAKd,YAJtB,SAME,cAAC,IAAD,MAEF,cAAC,IAAD,CACEmB,UAAU,iBACV3C,GAAG,SACHsC,QAAS,kBAAM,EAAK/B,uBAHtB,SAKE,cAAC,IAAD,mB,GAzcS8C,IAAMC,WC1BdC,MAbf,WACE,OACE,qBAAKZ,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACA,qBAAKa,IAAKC,EAAMzD,GAAG,OAAO0D,IAAI,eAC5B,yDAEA,cAAC,EAAD,UCDOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.b04ecb59.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/cubeSpin.da2d0198.gif\";","import React from \"react\";\r\nimport \"../App.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { AiFillPlusCircle, AiOutlineEdit, AiFillDelete, AiFillCheckCircle, } from 'react-icons/ai'\r\nimport { GiCancel } from 'react-icons/gi'\r\nimport {\r\n  Table,\r\n  Button,\r\n  Badge,\r\n  Container,\r\n  Modal,\r\n  ModalBody,\r\n  ModalHeader,\r\n  FormGroup,\r\n  ModalFooter,\r\n  Input,\r\n  Label,\r\n} from \"reactstrap\";\r\n\r\n//Retrive and initialize data\r\nvar data = []\r\n\r\nif (JSON.parse(localStorage.getItem(\"invData\")) != null) {\r\n  var data = JSON.parse(localStorage.getItem(\"invData\"))\r\n\r\n} else {\r\n  var data = [];\r\n}\r\n\r\n//Search and identify errors in the forms\r\nconst validate = values => {\r\n  const errors = {}\r\n  if (!values.nombre) {\r\n    errors.nombre = \"Este campo es obligatorio y contener un max de 30 caracteres\"\r\n  }\r\n  if (!values.costo) {\r\n    errors.costo = \"Este campo es obligatorio \"\r\n  }\r\n  if (!values.precio) {\r\n    errors.precio = \"Este campo es obligatorio \"\r\n  }\r\n  //if some case is true is stablished to show it\r\n  return errors\r\n}\r\n\r\nclass Products extends React.Component {\r\n  state = {\r\n    data: data,\r\n    modalActualizar: false,\r\n    modalInsertar: false,\r\n    hasNoC: false,\r\n    hasNoP: false,\r\n    form: {\r\n      id: \"\",\r\n      nombre: \"\",\r\n      costo: \"\",\r\n      iva: \"\",\r\n      precio: \"\",\r\n    },\r\n    errors: {},\r\n\r\n  };\r\n  //Management methods for modal update\r\n  mostrarModalActualizar = (dato) => {\r\n    this.setState({\r\n      form: dato,\r\n      modalActualizar: true,\r\n    });\r\n  };\r\n\r\n  cerrarModalActualizar = () => {\r\n    this.setState({ modalActualizar: false, hasNoC: false, hasNoP: false });\r\n  };\r\n\r\n  //Management methods for modal insert\r\n  mostrarModalInsertar = () => {\r\n\r\n    this.setState({\r\n      modalInsertar: true,\r\n    });\r\n  };\r\n\r\n  cerrarModalInsertar = () => {\r\n    this.setState({ modalInsertar: false, hasNoC: false, hasNoP: false });\r\n  };\r\n\r\n  //Recieves form data to update\r\n  editar = (dato) => {\r\n    //utilities for searching and further update\r\n    var contador = 0;\r\n    var arreglo = this.state.data;\r\n\r\n    arreglo.map((registro) => {\r\n\r\n      if (dato.id === registro.id) {\r\n        //Validates fields\r\n        var result = validate(dato);\r\n        this.setState({ errors: result })\r\n        if (!Object.keys(result).length) {\r\n          arreglo[contador].nombre = dato.nombre;\r\n          arreglo[contador].costo = dato.costo;\r\n          arreglo[contador].iva = parseFloat(dato.costo) * 0.16 + parseFloat(dato.costo);\r\n          arreglo[contador].precio = dato.precio;\r\n\r\n        }\r\n      }\r\n      contador++;\r\n\r\n    });\r\n    //Validates fields\r\n    var result = validate(dato);\r\n    if (!Object.keys(result).length) {\r\n      this.setState({ data: arreglo, modalActualizar: false });\r\n      //Adds to localstorage\r\n      localStorage.setItem(\"invData\", JSON.stringify(this.state.data))\r\n    } else {\r\n      //prevents to close modal\r\n      this.setState({ modalActualizar: true });\r\n    }\r\n  };\r\n\r\n  eliminar = (dato) => {\r\n    var opcion = window.confirm(\"¿Estás Seguro que deseas Eliminar \" + dato.nombre + \"?\");\r\n    if (opcion === true) {\r\n      var contador = 0;\r\n      var arreglo = this.state.data;\r\n      arreglo.map((registro) => {\r\n        if (dato.id === registro.id) {\r\n          arreglo.splice(contador, 1);\r\n        }\r\n        contador++;\r\n      });\r\n      this.setState({ data: arreglo, modalActualizar: false });\r\n      localStorage.setItem(\"invData\", JSON.stringify(this.state.data))\r\n    }\r\n  };\r\n\r\n  insertar = () => {\r\n    //Retrieves data from form and calculates IVA \r\n    this.state.form.iva = parseFloat(this.state.form.costo) * 0.16 + parseFloat(this.state.form.costo)\r\n    var valorNuevo = { ...this.state.form };\r\n    valorNuevo.id = this.state.data.length + 1;\r\n    //Validates fields\r\n    const result = validate(valorNuevo)\r\n    this.setState({ errors: result })\r\n    if (!Object.keys(result).length) {\r\n      var lista = this.state.data;\r\n      lista.push(valorNuevo);\r\n      this.setState({ modalInsertar: false, hasNoC: false, hasNoP: false, data: lista });\r\n      this.setState({\r\n        form: {\r\n          id: \"\",\r\n          nombre: \"\",\r\n          costo: \"\",\r\n          iva: \"\",\r\n          precio: \"\",\r\n        }\r\n      })\r\n      //Insert new data to localstorage\r\n      localStorage.setItem(\"invData\", JSON.stringify(this.state.data))\r\n    } else {\r\n      //prevents to close modal\r\n      this.setState({ modalInsertar: true })\r\n    }\r\n\r\n  }\r\n  //Handle changes section\r\n  handleChange = (e) => {\r\n    this.setState({\r\n      form: {\r\n        ...this.state.form,\r\n        [e.target.name]: e.target.value,\r\n      },\r\n    });\r\n  };\r\n\r\n  handleCheckP = (e) => {\r\n    //Manges check evennts for prices 'no visible' condition and adds a default value\r\n    if (e.target.checked) {\r\n      this.setState({\r\n        hasNoP: e.target.checked,\r\n        form: {\r\n          ...this.state.form,\r\n          precio: \"Pendiente\",\r\n        },\r\n\r\n      })\r\n    } else {\r\n      this.setState({\r\n        hasNoP: e.target.checked,\r\n        form: {\r\n          ...this.state.form,\r\n          precio: \"\",\r\n        },\r\n      })\r\n    }\r\n  }\r\n\r\n  handleCheckC = (e) => {\r\n    //Manges check evennts for costs 'no visible' condition and adds a default value\r\n    if (e.target.checked) {\r\n      this.setState({\r\n        hasNoC: e.target.checked,\r\n        form: {\r\n          ...this.state.form,\r\n          costo: \"1\",\r\n        },\r\n      })\r\n    } else {\r\n      this.setState({\r\n        hasNoC: e.target.checked,\r\n        form: {\r\n          ...this.state.form,\r\n          costo: \"\",\r\n        },\r\n      })\r\n    }\r\n\r\n\r\n\r\n  }\r\n  render() {\r\n\r\n\r\n    return (\r\n      <>\r\n        <Container>\r\n          <br />\r\n\r\n          <Button id=\"addB\" data-testid=\"addB\" color=\"success\" onClick={() => this.mostrarModalInsertar()}> <AiFillPlusCircle /></Button>\r\n          <br />\r\n          <br />\r\n          <Table striped bordered hover id=\"tabla\">\r\n            <thead data-testid=\"tableH\">\r\n              <tr>\r\n                <th>ID</th>\r\n                <th>Nombre</th>\r\n                <th>Costo</th>\r\n                <th>Costo+IVA</th>\r\n                <th>Precio</th>\r\n                <th>Acciones</th>\r\n              </tr>\r\n            </thead>\r\n\r\n            <tbody>\r\n              {this.state.data.map((dato) => (\r\n                <tr key={dato.id}>\r\n                  <td>{dato.id}</td>\r\n                  <td>{dato.nombre}</td>\r\n                  <td>${dato.costo}</td>\r\n                  <td>${dato.iva}</td>\r\n                  <td>${dato.precio}</td>\r\n                  <td id=\"actions\">\r\n                    <Button\r\n                      color=\"primary\"\r\n                      className=\"buttons\"\r\n                      onClick={() => this.mostrarModalActualizar(dato)}\r\n                    >\r\n                      <AiOutlineEdit />\r\n                    </Button>{\" \"}\r\n                    <Button color=\"danger\" className=\"buttons\" onClick={() => this.eliminar(dato)}> <AiFillDelete /> </Button>\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </Table>\r\n        </Container>\r\n\r\n        <Modal isOpen={this.state.modalActualizar} >\r\n          <ModalHeader>\r\n            <div><h3>Editar Producto</h3></div>\r\n          </ModalHeader>\r\n\r\n          <ModalBody>\r\n            <FormGroup>\r\n              <label>\r\n                Id:\r\n              </label>\r\n\r\n              <input\r\n                className=\"form-control\"\r\n                readOnly\r\n                type=\"text\"\r\n                value={this.state.data.length}\r\n              />\r\n            </FormGroup>\r\n\r\n            <FormGroup>\r\n              <label>\r\n                Nombre:\r\n              </label>\r\n              <input\r\n                className=\"form-control\"\r\n                name=\"nombre\"\r\n                type=\"text\"\r\n                required=\"true\"\r\n                maxLength=\"30\"\r\n                value={this.state.form.nombre}\r\n                onChange={this.handleChange}\r\n              />\r\n            </FormGroup>\r\n            < Badge bg=\"danger\"> {this.state.errors.nombre}</Badge>\r\n            <FormGroup>\r\n              <label>\r\n                Costo:\r\n              </label>\r\n              <input\r\n                className=\"form-control\"\r\n                name=\"costo\"\r\n                type=\"number\"\r\n                required=\"true\"\r\n                value={this.state.form.costo}\r\n                onChange={this.handleChange}\r\n              />\r\n            </FormGroup>\r\n            < Badge bg=\"danger\"> {this.state.errors.costo}</Badge>\r\n            <FormGroup\r\n              check\r\n              inline\r\n            >\r\n              <Input type=\"checkbox\" onChange={this.handleCheckC} />\r\n              <Label check>\r\n                No visible\r\n              </Label>\r\n            </FormGroup>\r\n\r\n            <FormGroup>\r\n              <label>\r\n                Costo+IVA:\r\n              </label>\r\n              <input\r\n                className=\"form-control\"\r\n                name=\"iva\"\r\n                readOnly\r\n                type=\"number\"\r\n                value={parseFloat(this.state.form.costo) * 0.16 + parseFloat(this.state.form.costo)}\r\n                required=\"true\"\r\n                onChange={this.handleChange}\r\n              />\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <label>\r\n                Precio:\r\n              </label>\r\n              {this.state.hasNoP ? null :\r\n                <input\r\n                  className=\"form-control\"\r\n                  name=\"precio\"\r\n                  type=\"number\"\r\n                  required=\"true\"\r\n                  value={this.state.form.precio}\r\n                  onChange={this.handleChange}\r\n                />}\r\n            </FormGroup>\r\n            < Badge bg=\"danger\"> {this.state.errors.precio}</Badge>\r\n            <FormGroup\r\n              check\r\n              inline>\r\n              <Input type=\"checkbox\" onChange={this.handleCheckP} />\r\n              <Label check>\r\n                No visible\r\n              </Label>\r\n            </FormGroup>\r\n\r\n          </ModalBody>\r\n\r\n          <ModalFooter>\r\n            <Button\r\n              color=\"primary\"\r\n              className=\"buttons\"\r\n              onClick={() => this.editar(this.state.form)}\r\n            >\r\n              <AiFillCheckCircle />\r\n            </Button>\r\n            <Button\r\n              color=\"danger\"\r\n              className=\"buttons\"\r\n              onClick={() => this.cerrarModalActualizar()}\r\n            >\r\n              <GiCancel />\r\n            </Button>\r\n          </ModalFooter>\r\n        </Modal>\r\n\r\n\r\n\r\n        <Modal isOpen={this.state.modalInsertar} data-testid=\"modal\">\r\n          <ModalHeader>\r\n            <div><h3>Insertar Producto</h3></div>\r\n          </ModalHeader>\r\n\r\n          <ModalBody>\r\n            <FormGroup>\r\n              <label>\r\n                Id:\r\n              </label>\r\n\r\n              <input\r\n                className=\"form-control\"\r\n                readOnly\r\n                type=\"text\"\r\n                value={this.state.data.length + 1}\r\n              />\r\n            </FormGroup>\r\n\r\n            <FormGroup>\r\n              <label>\r\n                Nombre:\r\n              </label>\r\n              <input\r\n                className=\"form-control\"\r\n                name=\"nombre\"\r\n                type=\"text\"\r\n                required=\"true\"\r\n                data-testid=\"nombreC\"\r\n                maxLength=\"30\"\r\n                onChange={this.handleChange}\r\n              />\r\n            </FormGroup>\r\n            < Badge bg=\"danger\"> {this.state.errors.nombre}</Badge>\r\n\r\n            <FormGroup>\r\n              <label>\r\n                Costo:\r\n              </label>\r\n              {this.state.hasNoC ? null :\r\n                <input\r\n                  className=\"form-control\"\r\n                  name=\"costo\"\r\n                  type=\"number\"\r\n                  data-testid=\"costo\"\r\n                  required=\"true\"\r\n                  onChange={this.handleChange}\r\n                />}\r\n              < Badge bg=\"danger\"> {this.state.errors.costo}</Badge>\r\n            </FormGroup>\r\n\r\n            <FormGroup\r\n              check\r\n              inline>\r\n              <Input type=\"checkbox\" onChange={this.handleCheckC} />\r\n              <Label check>\r\n                No visible\r\n              </Label>\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <label>\r\n                Costo+IVA:\r\n              </label>\r\n              <input\r\n                className=\"form-control\"\r\n                value={parseFloat(this.state.form.costo) * 0.16 + parseFloat(this.state.form.costo)}\r\n                name=\"iva\"\r\n\r\n                readOnly\r\n                type=\"number\"\r\n                required=\"true\"\r\n                onChange={this.handleChange}\r\n\r\n              />\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <label>\r\n                Precio:\r\n              </label>\r\n\r\n              {this.state.hasNoP ? null :\r\n                <input\r\n                  className=\"form-control\"\r\n                  name=\"precio\"\r\n                  type=\"number\"\r\n                  data-testid=\"precio\"\r\n                  required=\"true\"\r\n                  onChange={this.handleChange}\r\n                />}\r\n\r\n              < Badge bg=\"danger\"> {this.state.errors.precio}</Badge>\r\n            </FormGroup>\r\n            <FormGroup\r\n              check\r\n              inline>\r\n              <Input type=\"checkbox\" onChange={this.handleCheckP} />\r\n              <Label check>\r\n                No visible\r\n              </Label>\r\n            </FormGroup>\r\n          </ModalBody>\r\n\r\n          <ModalFooter>\r\n            <Button\r\n              color=\"primary\"\r\n              data-testid=\"insertarB\"\r\n              className=\"buttons\"\r\n              onClick={() => this.insertar()}\r\n            >\r\n              <AiFillCheckCircle />\r\n            </Button>\r\n            <Button\r\n              className=\"btn btn-danger\"\r\n              id=\"closeM\"\r\n              onClick={() => this.cerrarModalInsertar()}\r\n            >\r\n              <GiCancel />\r\n            </Button>\r\n          </ModalFooter>\r\n        </Modal>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default Products;","import './App.css';\r\n// bootstrap css\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport cube from './assets/cubeSpin.gif'\r\nimport Products from './components/Products';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n      <img src={cube} id=\"cube\" alt=\"loading...\" />\r\n        <h1>Inventario de productos</h1>\r\n        \r\n        <Products/>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}